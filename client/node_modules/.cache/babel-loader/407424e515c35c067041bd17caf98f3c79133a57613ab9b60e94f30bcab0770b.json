{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DEBU GUEST\\\\Desktop\\\\WebRTC Video App\\\\client\\\\src\\\\SocketContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useRef, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io(\"http://localhost:5000\");\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n  const [stream, setStream] = useState(null);\n  const [me, setMe] = useState(\"\");\n  const [call, setCall] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState(\"\");\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      if (myVideo.current) myVideo.current.srcObject = currentStream;\n    });\n    socket.on(\"me\", id => setMe(id));\n    socket.on(\"calluser\", ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivedCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"answercall\", {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on(\"stream\", currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"calluser\", {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on(\"stream\", currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on(\"callaccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(ContextProvider, \"GQd8nMXp8TqbdSqsvKF3xuNGd/w=\");\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","io","Peer","jsxDEV","_jsxDEV","SocketContext","socket","ContextProvider","children","_s","stream","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","name","setName","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id","from","callerName","signal","isReceivedCall","answerCall","peer","initiator","trickle","data","emit","to","callUser","userToCall","signalData","leaveCall","destroy","window","location","reload","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DEBU GUEST/Desktop/WebRTC Video App/client/src/SocketContext.js"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst socket = io(\"http://localhost:5000\");\r\n\r\nconst ContextProvider = ({ children }) => {\r\n  const [stream, setStream] = useState(null);\r\n  const [me, setMe] = useState(\"\");\r\n  const [call, setCall] = useState({});\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n  const [callEnded, setCallEnded] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const myVideo = useRef();\r\n  const userVideo = useRef();\r\n  const connectionRef = useRef();\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((currentStream) => {\r\n        setStream(currentStream);\r\n\r\n        if (myVideo.current) myVideo.current.srcObject = currentStream;\r\n      });\r\n\r\n    socket.on(\"me\", (id) => setMe(id));\r\n\r\n    socket.on(\"calluser\", ({ from, name: callerName, signal }) => {\r\n      setCall({ isReceivedCall: true, from, name: callerName, signal });\r\n    });\r\n  }, []);\r\n\r\n  const answerCall = () => {\r\n    setCallAccepted(true);\r\n\r\n    const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n    peer.on(\"signal\", (data) => {\r\n      socket.emit(\"answercall\", { signal: data, to: call.from });\r\n    });\r\n\r\n    peer.on(\"stream\", (currentStream) => {\r\n      userVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    peer.signal(call.signal);\r\n\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const callUser = (id) => {\r\n    const peer = new Peer({ initiator: true, trickle: false, stream });\r\n\r\n    peer.on(\"signal\", (data) => {\r\n      socket.emit(\"calluser\", {\r\n        userToCall: id,\r\n        signalData: data,\r\n        from: me,\r\n        name,\r\n      });\r\n    });\r\n\r\n    peer.on(\"stream\", (currentStream) => {\r\n      userVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    socket.on(\"callaccepted\", (signal) => {\r\n      setCallAccepted(true);\r\n\r\n      peer.signal(signal);\r\n    });\r\n\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const leaveCall = () => {\r\n    setCallEnded(true);\r\n    connectionRef.current.destroy();\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider\r\n      value={{\r\n        call,\r\n        callAccepted,\r\n        myVideo,\r\n        userVideo,\r\n        stream,\r\n        name,\r\n        setName,\r\n        callEnded,\r\n        me,\r\n        callUser,\r\n        leaveCall,\r\n        answerCall,\r\n      }}\r\n    >\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ContextProvider, SocketContext };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}